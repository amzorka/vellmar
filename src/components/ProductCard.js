import React, { useState, useRef } from "react";
import { Link } from "react-router-dom";
import AddToCartButton from "./AddToCartButton";
import RequestButton from "../components/RequestButton";
import CartNotification from "../components/CartNotification";

const ProductCard = ({ product, openModal }) => {
  const sortedImages = (product.images || []).sort(
    (a, b) => a.order_number - b.order_number
  );

  const imageUrl =
    sortedImages.length > 0 ? `https://famarket.ru${sortedImages[0].link}` : "";

  const hasVariants =
    product.variants && Object.keys(product.variants).length > 0;

  const [showNotification, setShowNotification] = useState(false);
  const hasRequestedRef = useRef(false); // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const imgRef = useRef(null); // –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è src

  const handleImageError = () => {
    if (hasRequestedRef.current || !product.link) return;

    hasRequestedRef.current = true;
    console.log("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–ø–∞—Ä—Å–∏–Ω–≥ –ø–æ link:", product.link);

    fetch(
      `https://api.vellmar.ru/collect-product?link=${encodeURIComponent(
        product.link
      )}`,
      {
        method: "POST",
      }
    )
      .then((res) => {
        if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–∞—Ä—Å–∏–Ω–≥–∞");
        console.log("‚úÖ –ü–µ—Ä–µ–ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω");

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          if (imgRef.current) {
            imgRef.current.src = `${imageUrl}?v=${Date.now()}`; // –æ–±—Ö–æ–¥ –∫—ç—à–∞
          }
        }, 3000);
      })
      .catch((err) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ collect-product:", err);
      });
  };

  return (
    <div className="product-card">
      <Link to={`/product${product.link}`}>
        <img
          ref={imgRef}
          src={imageUrl}
          alt={product.title.replace(/;+$/, "")}
          className="product-image"
          onError={handleImageError}
        />
        <h3 className="product-title">{product.title.replace(/;+$/, "")}</h3>
      </Link>

      <p className="product-price">
        {product.price > 0
          ? `"–¶–µ–Ω–∞:" ${new Intl.NumberFormat("ru-RU", {
              style: "decimal",
              minimumFractionDigits: 2,
              maximumFractionDigits: 2,
              useGrouping: true,
            })
              .format(product.price)
              .replace(",", ".")} ‚ÇΩ`
          : "–¶–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É"}
      </p>

      {hasVariants ? (
        <Link to={`/product${product.link}`} className="product-choose-button">
          –í—ã–±—Ä–∞—Ç—å
        </Link>
      ) : product.price > 0 ? (
        <>
          <AddToCartButton product={product} />
          {showNotification && (
            <CartNotification onClose={() => setShowNotification(false)} />
          )}
        </>
      ) : (
        <RequestButton
          onClick={() => openModal(product)}
          product={product}
          onRequestClick={(p) => openModal(p)}
        />
      )}
    </div>
  );
};

export default ProductCard;
